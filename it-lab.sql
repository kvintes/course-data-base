SET search_path TO it,public;
SHOW search_path;
--      1задание      --
-- 1. Написать команды создания таблиц заданной схемы с указанием
-- необходимых ключей и ограничений. Должны быть установлены все
-- ограничения первичного и внешних ключей. Все ограничения должны
-- быть именованными (для первичных ключей имена должны
-- начинаться с префикса «PK_», для вторичного ключа – «FK_»,
-- проверки - «CH_»). Все имена полей и типы данных должны
-- полностью соответствовать схеме (до языка и регистра).

-- Ограничения: дата начала восхождения не может быть больше даты
-- завершения восхождения; значение высоты не может отрицательным;
-- значение null допустимо только в поле адрес.
-- Для каждой таблицы должна быть возможна вставка картежа без
-- указания первичного ключа.

-- создать таблицы с ограничениями всех видов ключей
-- все ограничения должны быть именнованными
-- язык, тип данных, регистр и имена полей должны совпадать
-- соблюсти ограничения
-- для каждой таблицы есть возможность вставки ключа без указания первичного ключа

--SET search_path TO it, public; -- проишем путь к схеме
-- 1шаг создаем таблицу Альпинист-Восхождение +
create table if not EXISTS it.Альпинист_Восхождение
(
    ID_Альпиниста integer not null
    , ID_Восхождения integer not null
    , constraint PK_Альпинист_Восхождение primary key (ID_Альпиниста, ID_Восхождения)
)
;
-- 2шаг Альпинист-Восхождение возможность вставки кортежа без указания первичного ключа +
CREATE SEQUENCE IF NOT EXISTS it.Альпинист_Восхождение_Альп_seq MINVALUE 0;
alter TABLE Альпинист_Восхождение alter column ID_Альпиниста set DEFAULT nextval('Альпинист_Восхождение_Альп_seq');
ALTER SEQUENCE Альпинист_Восхождение_Альп_seq OWNED BY Альпинист_Восхождение.id_Альпиниста;

CREATE SEQUENCE IF NOT EXISTS it.Альпинист_Восхождение_Восх_seq MINVALUE 1000;
alter TABLE Альпинист_Восхождение alter column ID_Восхождения set DEFAULT nextval('Альпинист_Восхождение_Восх_seq');
ALTER SEQUENCE Альпинист_Восхождение_Восх_seq OWNED BY Альпинист_Восхождение.id_Восхождения;

-- 3шаг создаем таблицу Альпинисты +
--drop table Альпинисты;
create table if not EXISTS it.Альпинисты
(
    ID_Альпиниста integer not null
    , ФИО text not null
    , Адрес text -- значение null допустимо только в поле адрес
    , Телефон text not null
    , Дата_рождения date not null
    , constraint PK_Альпинисты primary key (ID_Альпиниста)
)
;

-- 4шаг Альпинисты возможность вставки кортежа без указания первичного ключа +
CREATE SEQUENCE IF NOT EXISTS it.Альпинисты_seq MINVALUE 0;
alter TABLE Альпинисты alter column ID_Альпиниста set DEFAULT nextval('Альпинисты_seq');
ALTER SEQUENCE Альпинисты_seq OWNED BY Альпинисты.id_Альпиниста;

--5 шаг внешний ключ +
--  Альпинист_Восхождение -> Альпинисты
ALTER TABLE Альпинист_Восхождение ADD
constraint FK_Альпинист_Восние__Альпинисты
FOREIGN KEY (ID_Альпиниста)
REFERENCES Альпинисты (ID_Альпиниста)
ON DELETE CASCADE

-- 6шаг создаем таблицу Восхождения +
--drop table Восхождения;
create table if not EXISTS it.Восхождения
(
    ID_Восхождения integer not null
    , Дата_начала timestamp not null
    , Дата_завершения timestamp not null
    , ID_Вершины integer not null
    , constraint PK_Восхождения primary key (ID_Восхождения)
)
;

-- 7шаг Восхождения возможность вставки кортежа без указания первичного ключа +
CREATE SEQUENCE IF NOT EXISTS it.Восхождения_seq MINVALUE 0;
alter TABLE Восхождения alter column ID_Восхождения set DEFAULT nextval('Восхождения_seq');
ALTER SEQUENCE Восхождения_seq OWNED BY Восхождения.ID_Восхождения;

--8 шаг внешний ключ +
--  Альпинист_Восхождение -> Восхождения
ALTER TABLE Альпинист_Восхождение ADD
constraint FK_Альпинист_Восние__Восхождения
FOREIGN KEY (ID_Восхождения)
REFERENCES Восхождения (ID_Восхождения)
ON DELETE CASCADE

--9 шаг добавление ограничений на Дата_начала < Дата_завершения +
ALTER TABLE Восхождения DROP CONSTRAINT IF EXISTS CH_dates_begin_end;
ALTER TABLE Восхождения ADD CONSTRAINT CH_dates_begin_end CHECK (Дата_начала < Дата_завершения)
;

-- 10шаг создаем таблицу Вершины +
--drop table if exists Вершины;
create table if not EXISTS it.Вершины
(
    ID_Вершины integer not null
    , Название text not null
    , Высота integer not null -- значение высоты не может отрицательным
    , Страна text not null
    , Регион text not null
    , constraint PK_Вершины primary key (ID_Вершины)
)
;

--11 шаг добавление ограничений на Дата_начала < Дата_завершения +
ALTER TABLE Вершины DROP CONSTRAINT IF EXISTS CH_heights;
ALTER TABLE Вершины ADD CONSTRAINT CH_heights CHECK (Высота >= 0)
;

--12 шаг внешний ключ +
--  Восхождения -> Вершины
ALTER TABLE Восхождения ADD
constraint FK_Восхождения__Вершины
FOREIGN KEY (ID_Вершины)
REFERENCES Вершины (ID_Вершины)
ON DELETE CASCADE

-- 13шаг Восхождения возможность вставки кортежа без указания первичного ключа +
CREATE SEQUENCE IF NOT EXISTS it.Вершины_seq MINVALUE 0;
alter TABLE Вершины alter column ID_Вершины set DEFAULT nextval('Вершины_seq');
ALTER SEQUENCE Вершины_seq OWNED BY Вершины.ID_Вершины;

------------------------------------------------------------------------------------------
--      2задание      --
--Заполнить созданные таблицы данными, 
--5-10 записей для каждой таблицы.

--1 шаг добавляем данные в таблицу Альпинисты
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Иванов Иван Иванович', 'ул. Ленина 10', '+7-123-45-67', '1990-01-01');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Петров Петр Петрович', 'ул. Пушкина 5', '+7-987-65-43', '1985-05-15');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Сидорова Анна Ивановна', 'пр. Гагарина 20', '+7-555-55-55', '1976-11-30');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Козлов Алексей Васильевич', 'ул. Советская 15', '+7-777-77-77', '2000-09-20');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Смирнова Елена Петровна', 'ул. Мира 3', '+7-222-22-22', '1995-12-10');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Николаев Николай Николаевич', 'пр. Ленина 25', '+7-333-33-33', '1982-07-05');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Кузнецова Ольга Александровна', 'ул. Победы 8', '+7-444-44-44', '1978-03-25');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Морозов Михаил Игоревич', 'ул. Кирова 12', '+7-666-66-66', '1992-08-14');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Васильева Татьяна Владимировна', 'пр. Сталина 30', '+7-999-99-99', '1987-06-18');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Попов Игорь Сергеевич', 'ул. Гагарина 7', '+7-111-11-11', '2001-04-02');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Алексеева Екатерина Ивановна', 'ул. Ленина 2', '+7-888-88-88', '1993-10-29');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Лебедев Дмитрий Александрович', 'пр. Жукова 18', '+7-777-88-99', '1980-12-23');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Григорьева Мария Дмитриевна', 'ул. Пушкина 11', '+7-123-45-67', '1998-09-07');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Тимофеев Артем Валерьевич', 'ул. Советская 4', '+7-987-65-43', '1986-11-16');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Орлова Наталья Андреевна', 'пр. Ленина 22', '+7-555-55-55', '1977-05-31');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Афанасьев Иван Васильевич', 'ул. Мира 6', '+7-777-77-77', '1999-08-21');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Федорова Елена Петровна', 'ул. Гагарина 13', '+7-222-22-22', '1994-02-11');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Сергеев Николай Николаевич', 'пр. Победы 9', '+7-333-33-33', '1981-07-06');
INSERT INTO Альпинисты (ФИО, Адрес, Телефон, Дата_рождения) values ('Иванова Ольга Александровна', 'ул. Кирова 14', '+7-444-44-44', '1979-04-26');
select * from Альпинисты
;-- проверяем что вставка кортежа без указания первичного ключа работает


--2 шаг добавляем данные в таблицу Вершины
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Эльбрус', 5642, 'Россия', 'Кабардино-Балкария');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Манаслу', 8163, 'Непал', 'Гора Манаслу');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Дхаулагири', 8167, 'Непал', 'Гора Дхаулагири');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Чо-Ойю', 8201, 'Непал', 'Гора Чо-Ойю');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Макалу', 8485, 'Непал', 'Гора Макалу');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Эльбрус', 5642, 'Россия', 'Кабардино-Балкария');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Аи-Петри', 1234, 'Россия', 'Крым');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Белуха', 4506, 'Россия', 'Алтай');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Казбек', 5033, 'Россия', 'Северная Осетия');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Ключевская Сопка', 4750, 'Россия', 'Камчатка');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Кузнецкий Алатау', 2167, 'Россия', 'Кемеровская область');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Машук', 994, 'Россия', 'Ставропольский край');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Оштен', 4058, 'Россия', 'Кабардино-Балкария');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Парнас', 270, 'Россия', 'Ленинградская область');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Пик Авачинский', 2741, 'Россия', 'Камчатка');

INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Пирамида', 3100, 'Россия', 'Алтай');

INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Балиал', 4007, 'Россия', 'Дагестан');
INSERT INTO Вершины (Название, Высота, Страна, Регион) values ('Даги', 4020, 'Россия', 'Дагестан');
select * from Вершины
;-- проверяем что вставка кортежа без указания первичного ключа работает


--3 шаг добавляем данные в таблицу Восхождения
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2019-04-26', '2019-05-26', 0);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-05-10', '2022-07-10', 1);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-06-15', '2022-08-15', 2);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-07-20', '2022-09-20', 3);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2010-08-25', '2010-10-25', 4);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2020-09-30', '2020-11-30', 5);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-11-05', '2023-01-05', 6);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-10', '2023-02-10', 7);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2018-01-15', '2018-03-15', 8);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-02-20', '2023-04-20', 9);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-03-25', '2023-05-25', 10);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-04-30', '2023-06-30', 11);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-06-05', '2023-08-05', 12);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-07-10', '2023-09-10', 13);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-08-15', '2023-10-15', 14);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2009-09-20', '2009-11-20', 5);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-10-25', '2023-12-25', 6);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2003-11-30', '2004-01-30', 7);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2023-12-05', '2024-02-05', 8);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2024-01-10', '2024-03-10', 9);

INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-11', '2023-02-10', 7);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-12', '2023-02-10', 7);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-13', '2023-02-10', 7);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-14', '2023-02-10', 7);

INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-15', '2023-02-10', 15);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-16', '2023-02-10', 15);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-17', '2023-02-10', 15);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-18', '2023-02-10', 15);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-12-19', '2023-02-10', 15);

INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-09-01', '2023-11-27', 16);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2022-09-30', '2023-11-28', 17);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2020-09-01', '2020-11-27', 16);
INSERT INTO Восхождения (Дата_начала, Дата_завершения, ID_Вершины) values ('2021-09-30', '2021-11-28', 17);
select * from Восхождения
;-- проверяем что вставка кортежа без указания первичного ключа работает

--4 шаг заполянем таблицу Альпинист-Восхождение
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (5, 11);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (7, 9);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 16);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (12, 3);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 13);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (9, 7);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (4, 18);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (10, 5);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (8, 12);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (3, 20);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (6, 1);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (14, 15);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (17, 2);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (11, 10);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (15, 4);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (13, 19);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (16, 6);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (0, 8);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (5, 14);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (7, 17);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 11);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (12, 9);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 16);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (9, 3);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (4, 13);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (10, 7);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (8, 18);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (3, 5);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (6, 12);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (14, 20);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (17, 1);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (11, 15);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (15, 2);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (13, 10);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (16, 4);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (0, 19);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (5, 6);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (7, 8);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 14);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (12, 17);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 11);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (9, 9);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (4, 16);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (10, 3);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (8, 13);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (3, 7);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (6, 18);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (14, 5);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (17, 12);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (11, 20);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (15, 1);

INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 21);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 22);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (3, 23);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (4, 24);

INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (5, 25);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (6, 26);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (7, 27);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (8, 28);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (9, 29);

INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 16);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 17);

INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 30);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 31);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (1, 32);
INSERT INTO Альпинист_Восхождение (ID_Альпиниста, id_Восхождения) values (2, 33);
select * from Альпинист_Восхождение
;
--      3задание      --
--      Требования      --
-- Написать запросы. Устранить дублирование только для тех случаев,
-- где это потенциально возможно. Каждый запрос должен возвращать не
-- менее одного картежа, при необходимости данные добавить


-- 3.1.Вывести все вершины на Алтае, высота которых более 3000 метров, 
--и на которые было совершено не менее 5 восхождений за последние 2 года.
-- Результат упорядочить по высоте. 
select Вершины.id_Вершины, count(id_Восхождения) as count_ascents
from 
Вершины
inner join Восхождения on Восхождения.ID_Вершины = Вершины.ID_Вершины
where 
	Регион ILIKE 'Алтай' 
	and Высота > 3000 
	and Дата_завершения >= current_timestamp - interval '2 years'
group by Вершины.id_Вершины
having count(id_Восхождения) > 4 
order by Высота
; 

-- 3.2. Для каждого альпиниста вывести список покорённых вершин, восхождения на которые длилось 30 или менее дней. В выборке должны
-- присутствовать только следующие атрибуты: Имя альпиниста, название вершины, длительность восхождения. Результат упорядочить по ФИО,
-- длительности. Альпинистов, для которых нет таких вершин не выводить
select Альпинисты.ФИО, Вершины.Название, Дата_завершения - Дата_начала as time_of_ascent
from Альпинисты
inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
where 
    Дата_завершения - Дата_начала <= interval '30 days'
order by Альпинисты.ФИО, Дата_завершения - Дата_начала
;

-- 3.3. Сформировать статистику восхождений по сезонам для завершённых восхождений. В выборке должны присутствовать только следующие
-- атрибуты: название сезона (лето, зима и т.д.), число восхождений, количество альпинистов, совершивших восхождения, средняя
-- продолжительность восхождения в днях.

-- общий ЗАПРОС
select sub_climbing.season_1, sub_climbing.count_climbing, sub_climbers.count_climbers, sub_climbing.avg_days_climbing
from
(
    select sub_1.season_end as season_1, count(sub_1.id_Восхождения) as count_climbing, avg(sub_1.climbing_days) as avg_days_climbing from
    (
        select 
        id_Восхождения, 
        CASE 
            WHEN date_part('month', Дата_завершения) = 12 or date_part('month', Дата_завершения) < 3  THEN 'winter'
            WHEN date_part('month', Дата_завершения) > 2 and date_part('month', Дата_завершения) < 6 THEN 'spring'
            WHEN date_part('month', Дата_завершения) > 5 and date_part('month', Дата_завершения) < 9 THEN 'summer'
            ELSE 'autumn'
        END as season_end,
        date_part('day', Дата_завершения - Дата_начала) as climbing_days
        from Восхождения
    ) as sub_1
    group by sub_1.season_end
) as sub_climbing-- посчитатли количество восхождений
inner join
(
    select sub_2.season_end as season_2, count(sub_2.climber) as count_climbers from
    (
        select 
        Альпинисты.id_Альпиниста as climber,
        CASE 
            WHEN date_part('month', Дата_завершения) = 12 or date_part('month', Дата_завершения) < 3  THEN 'winter'
            WHEN date_part('month', Дата_завершения) > 2 and date_part('month', Дата_завершения) < 6 THEN 'spring'
            WHEN date_part('month', Дата_завершения) > 5 and date_part('month', Дата_завершения) < 9 THEN 'summer'
            ELSE 'autumn'
        END as season_end

        from Восхождения
        inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Восхождения = Восхождения.id_Восхождения
        inner join Альпинисты on Альпинисты.id_Альпиниста = Альпинист_Восхождение.id_Альпиниста
    ) as sub_2
    group by sub_2.season_end
) as sub_climbers on sub_climbers.season_2 ILIKE sub_climbing.season_1
; -- посчитатли количество Альпинистов

--общий запрос

-- 3.4. Для каждой вершины найти общее число восхождений, средний возраст альпинистов, участвовавших в восхождении на эту вершину, средний
-- размер группы. Исключить из выборки горы, расположенные в Англии. В выборке должны присутствовать только следующие атрибуты: название
-- вершины, общее число восхождений, средний возраст альпинистов, участвовавших в восхождении на эту вершину, средний размер группы.


--общий запрос
select
sub_peaks.name_pick, sub.count_climbings, sub.avg_age, sub.avg_people_in_team
from
(
    select sub_climbings.peaks, sub_climbings.count_climbings, sub_climbers.avg_age, sub_avg_people_in_teams.avg_people_in_team
    from
    (
        select Вершины.id_Вершины as peaks, count(Восхождения.id_Восхождения) as count_climbings
        from Вершины
        inner join Восхождения on Восхождения.id_Вершины = Вершины.id_Вершины
        where NOT Вершины.Страна ILIKE 'Англия'--Исключить из выборки горы, расположенные в Англии
        group by Вершины.id_Вершины 
    ) as sub_climbings
    inner join
    (
        select Вершины.id_Вершины as peaks, AVG(age(current_timestamp, Альпинисты.Дата_рождения)) as avg_age
        from Вершины
        inner join Восхождения on Восхождения.id_Вершины = Вершины.id_Вершины
        inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Восхождения = Восхождения.id_Восхождения
        inner join Альпинисты on Альпинисты.id_Альпиниста = Альпинист_Восхождение.id_Альпиниста

        where NOT Вершины.Страна ILIKE 'Англия'--Исключить из выборки горы, расположенные в Англии
        group by Вершины.id_Вершины
    ) as sub_climbers on sub_climbers.peaks = sub_climbings.peaks --средний возраст альпинистов, участвовавших в восхождении на эту вершину
    inner join
    (
        select id_Вершины as peaks, avg(sub_1.count_climbings) as avg_people_in_team
        from Вершины
        inner join
        (
            select Восхождения.id_Восхождения, count(Альпинист_Восхождение.id_Восхождения) as count_climbings
            from Восхождения
            inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Восхождения = Восхождения.id_Восхождения
            group by Восхождения.id_Восхождения
        ) as sub_1 on sub_1.id_Восхождения = Вершины.id_Вершины
        group by id_Вершины --средний размер группы
    ) as sub_avg_people_in_teams on sub_avg_people_in_teams.peaks = sub_climbings.peaks
) as sub
inner join
(
    select Название as name_pick, id_Вершины
    from Вершины
) as sub_peaks on sub_peaks.id_Вершины = sub.peaks
;--общий запрос

-- 3.5. Вывести вершины, высота которых меньше средней по региону. В выборке должны присутствовать только следующие атрибуты: регион,
-- название вершины, высота, средняя высота по региону

--регион - средняя высота по региону
select
sub.name_peak, sub.height_peak, sub_avg_height.avg_height as avg_height_region
from
(
    select Вершины.Регион as region, avg(Вершины.Высота) as avg_height
    from Вершины    
    group by Вершины.Регион
) as sub_avg_height
inner join
(
    select Вершины.Регион as region, Вершины.Высота as height_peak, Вершины.id_Вершины as peak
    , Вершины.Название as name_peak
    from Вершины
) as sub on sub.region ILIKE sub_avg_height.region
;

-- 3.6. Для каждого альпиниста вывести число вершин, на которые кроме него никто не совершал восхождения. В выборке должны присутствовать
-- только следующие атрибуты: Имя альпиниста, название вершины, количество восхождений на эту вершину. 

-- общий запрос
select 
sub_name_peaks.name_peak, sub_name_climbers.name_climber, sub_help.count_climbings
from
(
    select Вершины.id_Вершины as id_peak, count(Альпинист_Восхождение.id_Восхождения) as count_climbings
    from Альпинисты
    inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
    inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
    inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
    group by Вершины.id_Вершины
) as sub
inner join
(
    select Вершины.id_Вершины as id_peak
    , Альпинисты.id_Альпиниста, count(Альпинист_Восхождение.id_Восхождения) as count_climber_climbings
    from Альпинисты
    inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
    inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
    inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
    group by Вершины.id_Вершины, Альпинисты.id_Альпиниста
)  as sub_peak_climber_countclimbings on sub_peak_climber_countclimbings.id_peak = sub.id_peak
inner join
(
    select Вершины.id_Вершины as id_peak, Альпинисты.id_Альпиниста as id_climber
    , count(Альпинист_Восхождение.id_Восхождения) as count_climbings
    from Альпинисты
    inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
    inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
    inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
    group by Вершины.id_Вершины, Альпинисты.id_Альпиниста
) as sub_help on sub_help.id_peak = sub.id_peak
inner join
(
    select Вершины.id_Вершины as id_peak, Вершины.Название as name_peak
    from Вершины
) as sub_name_peaks on sub_name_peaks.id_peak = sub.id_peak
inner join
(
    select Альпинисты.id_Альпиниста as id_climber, Альпинисты.ФИО as name_climber
    from Альпинисты
) as sub_name_climbers on sub_name_climbers.id_climber = sub_help.id_climber
where sub.count_climbings = sub_peak_climber_countclimbings.count_climber_climbings

;--общий запрос


--      4 задание       --
-- 4.1. В таблицу “Восхождения” добавить атрибут: “Итоговая продолжительность восхождения”. Для атрибута допустимо значение null. Заполнить
-- новое поле значениями для все завершённых восхождений. Продолжительность рассчитывается в днях.

--1 шаг добавляем новуб колонку в таблицу Восхождения
ALTER TABLE Восхождения add COLUMN Дней_восхождения numeric;

UPDATE Восхождения SET Дней_восхождения = 
(
    select sub.Дней_восхождения
    from
    (
    select Восхождения.id_Восхождения as id_climbing,
    CASE 
        WHEN Восхождения.Дата_завершения is NULL THEN NULL
        ELSE date_part('day', Дата_завершения-Дата_начала)
    END as Дней_восхождения
    from Восхождения
    ) as sub
    where sub.id_climbing = Восхождения.id_Восхождения
)
;
select * from Восхождения; -- проверочный запрос

-- 4.2. Удалить сведенья об альпинистах, не совершивших ни одного восхождения.

DELETE FROM Альпинист_Восхождение
WHERE id_Альпиниста IN 
(
    SELECT sub_help.id 
    FROM 
    (
        select
        sub.id as id, sub.count_climbings as count
        from 
        (
            select Альпинисты.id_Альпиниста as id, count(Альпинист_Восхождение.id_Восхождения) as count_climbings
            from Альпинисты
            inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
            group by Альпинисты.id_Альпиниста
        ) as sub
    ) as sub_help 
    WHERE sub_help.count = 0
);


--4.3. Выделить справочник регионов в отдельную таблицу.

-- 1шаг создаем новую таблицу regions
create table if not exists it.regions
(
    id serial not null
    , name_region text not null
    , constraint PK_regions primary key (id)
);
-- 2шаг заполняем новую таблицу regions
INSERT INTO regions
  ( name_region )
(
    select Регион
    from Вершины
); -- про модификацию таблиц не сказано, новая таблица создана


-- 5.1. Оформить запросы 3.5 - 3.6 в виде представления.
-- 3.5. Вывести вершины, высота которых меньше средней по региону. В выборке должны присутствовать только следующие атрибуты: регион,
-- название вершины, высота, средняя высота по региону
CREATE OR REPLACE VIEW view_3_5(name_peak, height_peak, avg_height_region) as
(
    select
    sub.name_peak, sub.height_peak, sub_avg_height.avg_height as avg_height_region
    from
    (
        select Вершины.Регион as region, avg(Вершины.Высота) as avg_height
        from Вершины    
        group by Вершины.Регион
    ) as sub_avg_height
    inner join
    (
        select Вершины.Регион as region, Вершины.Высота as height_peak, Вершины.id_Вершины as peak
        , Вершины.Название as name_peak
        from Вершины
    ) as sub on sub.region ILIKE sub_avg_height.region
);

-- 5.1. Оформить запросы 3.5 - 3.6 в виде представления.
-- 3.6. Для каждого альпиниста вывести число вершин, на которые кроме него никто не совершал восхождения. В выборке должны присутствовать
-- только следующие атрибуты: Имя альпиниста, название вершины, количество восхождений на эту вершину. 
CREATE OR REPLACE VIEW view_3_6(name_peak, name_climber, count_climbings) as
(
    select 
    sub_name_peaks.name_peak, sub_name_climbers.name_climber, sub_help.count_climbings
    from
    (
        select Вершины.id_Вершины as id_peak, count(Альпинист_Восхождение.id_Восхождения) as count_climbings
        from Альпинисты
        inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
        inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
        inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
        group by Вершины.id_Вершины
    ) as sub
    inner join
    (
        select Вершины.id_Вершины as id_peak
        , Альпинисты.id_Альпиниста, count(Альпинист_Восхождение.id_Восхождения) as count_climber_climbings
        from Альпинисты
        inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
        inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
        inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
        group by Вершины.id_Вершины, Альпинисты.id_Альпиниста
    )  as sub_peak_climber_countclimbings on sub_peak_climber_countclimbings.id_peak = sub.id_peak
    inner join
    (
        select Вершины.id_Вершины as id_peak, Альпинисты.id_Альпиниста as id_climber
        , count(Альпинист_Восхождение.id_Восхождения) as count_climbings
        from Альпинисты
        inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Альпиниста = Альпинисты.id_Альпиниста
        inner join Восхождения on Восхождения.id_Восхождения = Альпинист_Восхождение.id_Восхождения
        inner join Вершины on Вершины.id_Вершины = Восхождения.id_Вершины
        group by Вершины.id_Вершины, Альпинисты.id_Альпиниста
    ) as sub_help on sub_help.id_peak = sub.id_peak
    inner join
    (
        select Вершины.id_Вершины as id_peak, Вершины.Название as name_peak
        from Вершины
    ) as sub_name_peaks on sub_name_peaks.id_peak = sub.id_peak
    inner join
    (
        select Альпинисты.id_Альпиниста as id_climber, Альпинисты.ФИО as name_climber
        from Альпинисты
    ) as sub_name_climbers on sub_name_climbers.id_climber = sub_help.id_climber
    where sub.count_climbings = sub_peak_climber_countclimbings.count_climber_climbings
);
-- 5.2. Создать представление, содержащие незавершённые восхождения, со следующими атрибутами: ID_Альпиниста, ФИО, телефон, дата начала
-- восхождения (без времени), длительность восхождения в днях (число, прошедших с начала дней), название вершины, высота, страна.


-- select Вершины.Регион
-- from Вершины
-- Восхождения Альпинист_Восхождение Альпинисты
-- inner join Восхождения on Восхождения.id_Вершины = Вершины.id_Вершины
-- inner join Альпинист_Восхождение on Альпинист_Восхождение.id_Восхождения = Восхождения.id_Восхождения
-- inner join Альпинисты on Альпинисты.id_Альпиниста = Альпинист_Восхождение.id_Альпиниста
